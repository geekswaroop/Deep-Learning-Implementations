# -*- coding: utf-8 -*-
"""IMDB-BinaryClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rm1IJnOq6tE8WvXFmBlhkuGijvXggh44
"""

from keras.datasets import imdb
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=1000)

train_data

train_labels

import pandas as pd

#train_data = pd.DataFrame(train_data)

#train_data.info()

#train_data.head()

len(train_data)

#train_data[0]

train_data[0][1]

import numpy as np
dimension = 10000
results = np.zeros((len(train_data), dimension))

results

def vectorizeSequences(sequences):
  for i, j in enumerate(sequences):
      # i is the index of the list. j is the index of the ith row of the list?
      results[i, j] = 1
  return results

x_train = vectorizeSequences(train_data)
x_test = vectorizeSequences(test_data)
#One hot encoding done!

x_train

y_train = train_labels

y_test = test_labels

from keras import models
from keras.layers import Dense

model = models.Sequential()

model.add(Dense(16, activation='relu', input_shape=(10000,)))
model.add(Dense(16, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])

x_val = x_train[:10000]
partial_x_train = x_train[10000:]

y_val = y_train[:10000]
partial_y_train = y_train[10000:]

history = model.fit(partial_x_train, partial_y_train, batch_size=512, epochs=4, verbose=1, validation_data=(x_val, y_val))

history_dict = history.history
history_dict.keys()

import matplotlib.pyplot as plt
history_dict = history.history
loss_values = history_dict['loss']
val_loss_values = history_dict['val_loss']
acc = history_dict['acc']
epochs = range(1, len(acc)+1)

plt.plot(epochs, loss_values, 'bo')
plt.plot(epochs, val_loss_values, 'b')
plt.show()

import matplotlib.pyplot as plt
history_dict = history.history
acc_values = history_dict['acc']
val_acc = history_dict['val_acc']
acc = history_dict['acc']
epochs = range(1, len(acc)+1)

plt.plot(epochs, acc_values, 'bo')
plt.plot(epochs, val_acc, 'b')
plt.show()

model.evaluate(x_test, y_test)

#Experiments

## 3 hidden layers

model.add(Dense(16, activation='relu', input_shape=(10000,)))
model.add(Dense(16, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(partial_x_train, partial_y_train, batch_size=512, epochs=5, verbose=1, validation_data=(x_val, y_val))

import matplotlib.pyplot as plt
history_dict = history.history
loss_values = history_dict['loss']
val_loss_values = history_dict['val_loss']
acc = history_dict['acc']
epochs = range(1, len(acc)+1)

plt.plot(epochs, loss_values, 'bo')
plt.plot(epochs, val_loss_values, 'b')
plt.show()



import matplotlib.pyplot as plt
history_dict = history.history
acc_values = history_dict['acc']
val_acc = history_dict['val_acc']
acc = history_dict['acc']
epochs = range(1, len(acc)+1)

plt.plot(epochs, acc_values, 'bo')
plt.plot(epochs, val_acc, 'b')
plt.show()

model.evaluate(x_test, y_test)
# 3 layer sucks!

## 1 layer
model.add(Dense(16, activation='relu', input_shape=(10000,)))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(partial_x_train, partial_y_train, batch_size=512, epochs=4, verbose=1, validation_data=(x_val, y_val))

import matplotlib.pyplot as plt
history_dict = history.history
loss_values = history_dict['loss']
val_loss_values = history_dict['val_loss']
acc = history_dict['acc']
epochs = range(1, len(acc)+1)

plt.plot(epochs, loss_values, 'bo')
plt.plot(epochs, val_loss_values, 'b')
plt.show()



import matplotlib.pyplot as plt
history_dict = history.history
acc_values = history_dict['acc']
val_acc = history_dict['val_acc']
acc = history_dict['acc']
epochs = range(1, len(acc)+1)

plt.plot(epochs, acc_values, 'bo')
plt.plot(epochs, val_acc, 'b')
plt.show()

# 1 layer is mega suck!
model.evaluate(x_test, y_test)

